//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyGameList.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAccounts", ReplyAction="http://tempuri.org/IService1/GetAllAccountsResponse")]
        WcfServiceLibrary.Account[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllAccounts", ReplyAction="http://tempuri.org/IService1/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Account[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueLogin", ReplyAction="http://tempuri.org/IService1/IsUniqueLoginResponse")]
        bool IsUniqueLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueLogin", ReplyAction="http://tempuri.org/IService1/IsUniqueLoginResponse")]
        System.Threading.Tasks.Task<bool> IsUniqueLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueEmail", ReplyAction="http://tempuri.org/IService1/IsUniqueEmailResponse")]
        bool IsUniqueEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueEmail", ReplyAction="http://tempuri.org/IService1/IsUniqueEmailResponse")]
        System.Threading.Tasks.Task<bool> IsUniqueEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueNickname", ReplyAction="http://tempuri.org/IService1/IsUniqueNicknameResponse")]
        bool IsUniqueNickname(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsUniqueNickname", ReplyAction="http://tempuri.org/IService1/IsUniqueNicknameResponse")]
        System.Threading.Tasks.Task<bool> IsUniqueNicknameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAccount", ReplyAction="http://tempuri.org/IService1/AddAccountResponse")]
        void AddAccount(WcfServiceLibrary.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddAccount", ReplyAction="http://tempuri.org/IService1/AddAccountResponse")]
        System.Threading.Tasks.Task AddAccountAsync(WcfServiceLibrary.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccount", ReplyAction="http://tempuri.org/IService1/GetAccountResponse")]
        WcfServiceLibrary.Account GetAccount(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccount", ReplyAction="http://tempuri.org/IService1/GetAccountResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Account> GetAccountAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        void UpdateAccount(int id, WcfServiceLibrary.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        System.Threading.Tasks.Task UpdateAccountAsync(int id, WcfServiceLibrary.Account account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAvatar", ReplyAction="http://tempuri.org/IService1/GetAvatarResponse")]
        byte[] GetAvatar(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAvatar", ReplyAction="http://tempuri.org/IService1/GetAvatarResponse")]
        System.Threading.Tasks.Task<byte[]> GetAvatarAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGamesByDateOfAddiction", ReplyAction="http://tempuri.org/IService1/GetAllGamesByDateOfAddictionResponse")]
        WcfServiceLibrary.Game[] GetAllGamesByDateOfAddiction();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGamesByDateOfAddiction", ReplyAction="http://tempuri.org/IService1/GetAllGamesByDateOfAddictionResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Game[]> GetAllGamesByDateOfAddictionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameScore", ReplyAction="http://tempuri.org/IService1/GetGameScoreResponse")]
        double GetGameScore(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameScore", ReplyAction="http://tempuri.org/IService1/GetGameScoreResponse")]
        System.Threading.Tasks.Task<double> GetGameScoreAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountAverageScore", ReplyAction="http://tempuri.org/IService1/GetAccountAverageScoreResponse")]
        double GetAccountAverageScore(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountAverageScore", ReplyAction="http://tempuri.org/IService1/GetAccountAverageScoreResponse")]
        System.Threading.Tasks.Task<double> GetAccountAverageScoreAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNumberOfScores", ReplyAction="http://tempuri.org/IService1/GetNumberOfScoresResponse")]
        int GetNumberOfScores(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNumberOfScores", ReplyAction="http://tempuri.org/IService1/GetNumberOfScoresResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfScoresAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSumOfNewReviews", ReplyAction="http://tempuri.org/IService1/GetSumOfNewReviewsResponse")]
        int GetSumOfNewReviews(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSumOfNewReviews", ReplyAction="http://tempuri.org/IService1/GetSumOfNewReviewsResponse")]
        System.Threading.Tasks.Task<int> GetSumOfNewReviewsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameMembers", ReplyAction="http://tempuri.org/IService1/GetGameMembersResponse")]
        int GetGameMembers(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameMembers", ReplyAction="http://tempuri.org/IService1/GetGameMembersResponse")]
        System.Threading.Tasks.Task<int> GetGameMembersAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameByTitle", ReplyAction="http://tempuri.org/IService1/GetGameByTitleResponse")]
        WcfServiceLibrary.Game GetGameByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameByTitle", ReplyAction="http://tempuri.org/IService1/GetGameByTitleResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Game> GetGameByTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById", ReplyAction="http://tempuri.org/IService1/GetGameByIdResponse")]
        WcfServiceLibrary.Game GetGameById(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameById", ReplyAction="http://tempuri.org/IService1/GetGameByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Game> GetGameByIdAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGame", ReplyAction="http://tempuri.org/IService1/UpdateGameResponse")]
        void UpdateGame(int id, WcfServiceLibrary.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGame", ReplyAction="http://tempuri.org/IService1/UpdateGameResponse")]
        System.Threading.Tasks.Task UpdateGameAsync(int id, WcfServiceLibrary.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioName", ReplyAction="http://tempuri.org/IService1/GetStudioNameResponse")]
        string GetStudioName(int studioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioName", ReplyAction="http://tempuri.org/IService1/GetStudioNameResponse")]
        System.Threading.Tasks.Task<string> GetStudioNameAsync(int studioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGamePlatforms", ReplyAction="http://tempuri.org/IService1/GetGamePlatformsResponse")]
        string GetGamePlatforms(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGamePlatforms", ReplyAction="http://tempuri.org/IService1/GetGamePlatformsResponse")]
        System.Threading.Tasks.Task<string> GetGamePlatformsAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatform", ReplyAction="http://tempuri.org/IService1/GetPlatformResponse")]
        string GetPlatform(int platformID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatform", ReplyAction="http://tempuri.org/IService1/GetPlatformResponse")]
        System.Threading.Tasks.Task<string> GetPlatformAsync(int platformID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameGenres", ReplyAction="http://tempuri.org/IService1/GetGameGenresResponse")]
        string GetGameGenres(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameGenres", ReplyAction="http://tempuri.org/IService1/GetGameGenresResponse")]
        System.Threading.Tasks.Task<string> GetGameGenresAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenre", ReplyAction="http://tempuri.org/IService1/GetGenreResponse")]
        string GetGenre(int genreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenre", ReplyAction="http://tempuri.org/IService1/GetGenreResponse")]
        System.Threading.Tasks.Task<string> GetGenreAsync(int genreID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameListByAccountId", ReplyAction="http://tempuri.org/IService1/GetGameListByAccountIdResponse")]
        WcfServiceLibrary.GameList[] GetGameListByAccountId(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameListByAccountId", ReplyAction="http://tempuri.org/IService1/GetGameListByAccountIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.GameList[]> GetGameListByAccountIdAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowListByAccountId", ReplyAction="http://tempuri.org/IService1/GetFollowListByAccountIdResponse")]
        WcfServiceLibrary.Follow[] GetFollowListByAccountId(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFollowListByAccountId", ReplyAction="http://tempuri.org/IService1/GetFollowListByAccountIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Follow[]> GetFollowListByAccountIdAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollowEntry", ReplyAction="http://tempuri.org/IService1/DeleteFollowEntryResponse")]
        void DeleteFollowEntry(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFollowEntry", ReplyAction="http://tempuri.org/IService1/DeleteFollowEntryResponse")]
        System.Threading.Tasks.Task DeleteFollowEntryAsync(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGameListEntry", ReplyAction="http://tempuri.org/IService1/DeleteGameListEntryResponse")]
        void DeleteGameListEntry(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGameListEntry", ReplyAction="http://tempuri.org/IService1/DeleteGameListEntryResponse")]
        System.Threading.Tasks.Task DeleteGameListEntryAsync(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewFollow", ReplyAction="http://tempuri.org/IService1/InsertNewFollowResponse")]
        void InsertNewFollow(WcfServiceLibrary.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewFollow", ReplyAction="http://tempuri.org/IService1/InsertNewFollowResponse")]
        System.Threading.Tasks.Task InsertNewFollowAsync(WcfServiceLibrary.Follow follow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGameList", ReplyAction="http://tempuri.org/IService1/UpdateGameListResponse")]
        void UpdateGameList(WcfServiceLibrary.GameList gameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateGameList", ReplyAction="http://tempuri.org/IService1/UpdateGameListResponse")]
        System.Threading.Tasks.Task UpdateGameListAsync(WcfServiceLibrary.GameList gameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGameList", ReplyAction="http://tempuri.org/IService1/InsertNewGameListResponse")]
        void InsertNewGameList(WcfServiceLibrary.GameList gameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGameList", ReplyAction="http://tempuri.org/IService1/InsertNewGameListResponse")]
        System.Threading.Tasks.Task InsertNewGameListAsync(WcfServiceLibrary.GameList gameList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendListByAccountId", ReplyAction="http://tempuri.org/IService1/GetFriendListByAccountIdResponse")]
        WcfServiceLibrary.Friend[] GetFriendListByAccountId(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendListByAccountId", ReplyAction="http://tempuri.org/IService1/GetFriendListByAccountIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendListByAccountIdAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountById", ReplyAction="http://tempuri.org/IService1/GetAccountByIdResponse")]
        WcfServiceLibrary.Account GetAccountById(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountById", ReplyAction="http://tempuri.org/IService1/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Account> GetAccountByIdAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        void DeleteFriend(int accountID, int friendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteFriend", ReplyAction="http://tempuri.org/IService1/DeleteFriendResponse")]
        System.Threading.Tasks.Task DeleteFriendAsync(int accountID, int friendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFriend", ReplyAction="http://tempuri.org/IService1/InsertFriendResponse")]
        void InsertFriend(WcfServiceLibrary.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertFriend", ReplyAction="http://tempuri.org/IService1/InsertFriendResponse")]
        System.Threading.Tasks.Task InsertFriendAsync(WcfServiceLibrary.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFriend", ReplyAction="http://tempuri.org/IService1/UpdateFriendResponse")]
        void UpdateFriend(int accountID, int friendID, WcfServiceLibrary.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFriend", ReplyAction="http://tempuri.org/IService1/UpdateFriendResponse")]
        System.Threading.Tasks.Task UpdateFriendAsync(int accountID, int friendID, WcfServiceLibrary.Friend friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameListByGameId", ReplyAction="http://tempuri.org/IService1/GetGameListByGameIdResponse")]
        WcfServiceLibrary.GameList[] GetGameListByGameId(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameListByGameId", ReplyAction="http://tempuri.org/IService1/GetGameListByGameIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.GameList[]> GetGameListByGameIdAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendRequests", ReplyAction="http://tempuri.org/IService1/GetFriendRequestsResponse")]
        WcfServiceLibrary.Friend[] GetFriendRequests(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendRequests", ReplyAction="http://tempuri.org/IService1/GetFriendRequestsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendRequestsAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFollow", ReplyAction="http://tempuri.org/IService1/UpdateFollowResponse")]
        void UpdateFollow(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateFollow", ReplyAction="http://tempuri.org/IService1/UpdateFollowResponse")]
        System.Threading.Tasks.Task UpdateFollowAsync(int accountID, int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendListBothAcceptedByAccountId", ReplyAction="http://tempuri.org/IService1/GetFriendListBothAcceptedByAccountIdResponse")]
        WcfServiceLibrary.Friend[] GetFriendListBothAcceptedByAccountId(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendListBothAcceptedByAccountId", ReplyAction="http://tempuri.org/IService1/GetFriendListBothAcceptedByAccountIdResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendListBothAcceptedByAccountIdAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioList", ReplyAction="http://tempuri.org/IService1/GetStudioListResponse")]
        WcfServiceLibrary.Studio[] GetStudioList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioList", ReplyAction="http://tempuri.org/IService1/GetStudioListResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Studio[]> GetStudioListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewStudio", ReplyAction="http://tempuri.org/IService1/InsertNewStudioResponse")]
        void InsertNewStudio(WcfServiceLibrary.Studio studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewStudio", ReplyAction="http://tempuri.org/IService1/InsertNewStudioResponse")]
        System.Threading.Tasks.Task InsertNewStudioAsync(WcfServiceLibrary.Studio studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlatforms", ReplyAction="http://tempuri.org/IService1/GetAllPlatformsResponse")]
        WcfServiceLibrary.Platform[] GetAllPlatforms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPlatforms", ReplyAction="http://tempuri.org/IService1/GetAllPlatformsResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Platform[]> GetAllPlatformsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGenres", ReplyAction="http://tempuri.org/IService1/GetAllGenresResponse")]
        WcfServiceLibrary.Genre[] GetAllGenres();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllGenres", ReplyAction="http://tempuri.org/IService1/GetAllGenresResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Genre[]> GetAllGenresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGameAlreadyExist", ReplyAction="http://tempuri.org/IService1/IsGameAlreadyExistResponse")]
        bool IsGameAlreadyExist(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsGameAlreadyExist", ReplyAction="http://tempuri.org/IService1/IsGameAlreadyExistResponse")]
        System.Threading.Tasks.Task<bool> IsGameAlreadyExistAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioByName", ReplyAction="http://tempuri.org/IService1/GetStudioByNameResponse")]
        WcfServiceLibrary.Studio GetStudioByName(string studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStudioByName", ReplyAction="http://tempuri.org/IService1/GetStudioByNameResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Studio> GetStudioByNameAsync(string studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGame", ReplyAction="http://tempuri.org/IService1/InsertNewGameResponse")]
        void InsertNewGame(WcfServiceLibrary.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGame", ReplyAction="http://tempuri.org/IService1/InsertNewGameResponse")]
        System.Threading.Tasks.Task InsertNewGameAsync(WcfServiceLibrary.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGamePlatform", ReplyAction="http://tempuri.org/IService1/InsertNewGamePlatformResponse")]
        void InsertNewGamePlatform(WcfServiceLibrary.Game_platform game_Platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGamePlatform", ReplyAction="http://tempuri.org/IService1/InsertNewGamePlatformResponse")]
        System.Threading.Tasks.Task InsertNewGamePlatformAsync(WcfServiceLibrary.Game_platform game_Platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGameGenre", ReplyAction="http://tempuri.org/IService1/InsertNewGameGenreResponse")]
        void InsertNewGameGenre(WcfServiceLibrary.Game_genre game_Genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGameGenre", ReplyAction="http://tempuri.org/IService1/InsertNewGameGenreResponse")]
        System.Threading.Tasks.Task InsertNewGameGenreAsync(WcfServiceLibrary.Game_genre game_Genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameId", ReplyAction="http://tempuri.org/IService1/GetGameIdResponse")]
        int GetGameId(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameId", ReplyAction="http://tempuri.org/IService1/GetGameIdResponse")]
        System.Threading.Tasks.Task<int> GetGameIdAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatformId", ReplyAction="http://tempuri.org/IService1/GetPlatformIdResponse")]
        int GetPlatformId(string platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPlatformId", ReplyAction="http://tempuri.org/IService1/GetPlatformIdResponse")]
        System.Threading.Tasks.Task<int> GetPlatformIdAsync(string platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenreId", ReplyAction="http://tempuri.org/IService1/GetGenreIdResponse")]
        int GetGenreId(string genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenreId", ReplyAction="http://tempuri.org/IService1/GetGenreIdResponse")]
        System.Threading.Tasks.Task<int> GetGenreIdAsync(string genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequestedGames", ReplyAction="http://tempuri.org/IService1/GetRequestedGamesResponse")]
        WcfServiceLibrary.Game[] GetRequestedGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequestedGames", ReplyAction="http://tempuri.org/IService1/GetRequestedGamesResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Game[]> GetRequestedGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequestedStudios", ReplyAction="http://tempuri.org/IService1/GetRequestedStudiosResponse")]
        WcfServiceLibrary.Studio[] GetRequestedStudios();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRequestedStudios", ReplyAction="http://tempuri.org/IService1/GetRequestedStudiosResponse")]
        System.Threading.Tasks.Task<WcfServiceLibrary.Studio[]> GetRequestedStudiosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGamePlatformsList", ReplyAction="http://tempuri.org/IService1/GetGamePlatformsListResponse")]
        string[] GetGamePlatformsList(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGamePlatformsList", ReplyAction="http://tempuri.org/IService1/GetGamePlatformsListResponse")]
        System.Threading.Tasks.Task<string[]> GetGamePlatformsListAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameGenresList", ReplyAction="http://tempuri.org/IService1/GetGameGenresListResponse")]
        string[] GetGameGenresList(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGameGenresList", ReplyAction="http://tempuri.org/IService1/GetGameGenresListResponse")]
        System.Threading.Tasks.Task<string[]> GetGameGenresListAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllGamePlatforms", ReplyAction="http://tempuri.org/IService1/DeleteAllGamePlatformsResponse")]
        void DeleteAllGamePlatforms(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllGamePlatforms", ReplyAction="http://tempuri.org/IService1/DeleteAllGamePlatformsResponse")]
        System.Threading.Tasks.Task DeleteAllGamePlatformsAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllGameGenres", ReplyAction="http://tempuri.org/IService1/DeleteAllGameGenresResponse")]
        void DeleteAllGameGenres(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteAllGameGenres", ReplyAction="http://tempuri.org/IService1/DeleteAllGameGenresResponse")]
        System.Threading.Tasks.Task DeleteAllGameGenresAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGameEntry", ReplyAction="http://tempuri.org/IService1/DeleteGameEntryResponse")]
        void DeleteGameEntry(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGameEntry", ReplyAction="http://tempuri.org/IService1/DeleteGameEntryResponse")]
        System.Threading.Tasks.Task DeleteGameEntryAsync(int gameID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStudio", ReplyAction="http://tempuri.org/IService1/UpdateStudioResponse")]
        void UpdateStudio(int studioID, WcfServiceLibrary.Studio studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateStudio", ReplyAction="http://tempuri.org/IService1/UpdateStudioResponse")]
        System.Threading.Tasks.Task UpdateStudioAsync(int studioID, WcfServiceLibrary.Studio studio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudio", ReplyAction="http://tempuri.org/IService1/DeleteStudioResponse")]
        void DeleteStudio(int studioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteStudio", ReplyAction="http://tempuri.org/IService1/DeleteStudioResponse")]
        System.Threading.Tasks.Task DeleteStudioAsync(int studioID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewPlatform", ReplyAction="http://tempuri.org/IService1/InsertNewPlatformResponse")]
        void InsertNewPlatform(WcfServiceLibrary.Platform platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewPlatform", ReplyAction="http://tempuri.org/IService1/InsertNewPlatformResponse")]
        System.Threading.Tasks.Task InsertNewPlatformAsync(WcfServiceLibrary.Platform platform);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGenre", ReplyAction="http://tempuri.org/IService1/InsertNewGenreResponse")]
        void InsertNewGenre(WcfServiceLibrary.Genre genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertNewGenre", ReplyAction="http://tempuri.org/IService1/InsertNewGenreResponse")]
        System.Threading.Tasks.Task InsertNewGenreAsync(WcfServiceLibrary.Genre genre);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MyGameList.ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MyGameList.ServiceReference.IService1>, MyGameList.ServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfServiceLibrary.Account[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Account[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public bool IsUniqueLogin(string login) {
            return base.Channel.IsUniqueLogin(login);
        }
        
        public System.Threading.Tasks.Task<bool> IsUniqueLoginAsync(string login) {
            return base.Channel.IsUniqueLoginAsync(login);
        }
        
        public bool IsUniqueEmail(string email) {
            return base.Channel.IsUniqueEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> IsUniqueEmailAsync(string email) {
            return base.Channel.IsUniqueEmailAsync(email);
        }
        
        public bool IsUniqueNickname(string nickname) {
            return base.Channel.IsUniqueNickname(nickname);
        }
        
        public System.Threading.Tasks.Task<bool> IsUniqueNicknameAsync(string nickname) {
            return base.Channel.IsUniqueNicknameAsync(nickname);
        }
        
        public void AddAccount(WcfServiceLibrary.Account account) {
            base.Channel.AddAccount(account);
        }
        
        public System.Threading.Tasks.Task AddAccountAsync(WcfServiceLibrary.Account account) {
            return base.Channel.AddAccountAsync(account);
        }
        
        public WcfServiceLibrary.Account GetAccount(string login) {
            return base.Channel.GetAccount(login);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Account> GetAccountAsync(string login) {
            return base.Channel.GetAccountAsync(login);
        }
        
        public void UpdateAccount(int id, WcfServiceLibrary.Account account) {
            base.Channel.UpdateAccount(id, account);
        }
        
        public System.Threading.Tasks.Task UpdateAccountAsync(int id, WcfServiceLibrary.Account account) {
            return base.Channel.UpdateAccountAsync(id, account);
        }
        
        public byte[] GetAvatar(int id) {
            return base.Channel.GetAvatar(id);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAvatarAsync(int id) {
            return base.Channel.GetAvatarAsync(id);
        }
        
        public WcfServiceLibrary.Game[] GetAllGamesByDateOfAddiction() {
            return base.Channel.GetAllGamesByDateOfAddiction();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Game[]> GetAllGamesByDateOfAddictionAsync() {
            return base.Channel.GetAllGamesByDateOfAddictionAsync();
        }
        
        public double GetGameScore(int id) {
            return base.Channel.GetGameScore(id);
        }
        
        public System.Threading.Tasks.Task<double> GetGameScoreAsync(int id) {
            return base.Channel.GetGameScoreAsync(id);
        }
        
        public double GetAccountAverageScore(int id) {
            return base.Channel.GetAccountAverageScore(id);
        }
        
        public System.Threading.Tasks.Task<double> GetAccountAverageScoreAsync(int id) {
            return base.Channel.GetAccountAverageScoreAsync(id);
        }
        
        public int GetNumberOfScores(int id) {
            return base.Channel.GetNumberOfScores(id);
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfScoresAsync(int id) {
            return base.Channel.GetNumberOfScoresAsync(id);
        }
        
        public int GetSumOfNewReviews(int id) {
            return base.Channel.GetSumOfNewReviews(id);
        }
        
        public System.Threading.Tasks.Task<int> GetSumOfNewReviewsAsync(int id) {
            return base.Channel.GetSumOfNewReviewsAsync(id);
        }
        
        public int GetGameMembers(int id) {
            return base.Channel.GetGameMembers(id);
        }
        
        public System.Threading.Tasks.Task<int> GetGameMembersAsync(int id) {
            return base.Channel.GetGameMembersAsync(id);
        }
        
        public WcfServiceLibrary.Game GetGameByTitle(string title) {
            return base.Channel.GetGameByTitle(title);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Game> GetGameByTitleAsync(string title) {
            return base.Channel.GetGameByTitleAsync(title);
        }
        
        public WcfServiceLibrary.Game GetGameById(int gameID) {
            return base.Channel.GetGameById(gameID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Game> GetGameByIdAsync(int gameID) {
            return base.Channel.GetGameByIdAsync(gameID);
        }
        
        public void UpdateGame(int id, WcfServiceLibrary.Game game) {
            base.Channel.UpdateGame(id, game);
        }
        
        public System.Threading.Tasks.Task UpdateGameAsync(int id, WcfServiceLibrary.Game game) {
            return base.Channel.UpdateGameAsync(id, game);
        }
        
        public string GetStudioName(int studioID) {
            return base.Channel.GetStudioName(studioID);
        }
        
        public System.Threading.Tasks.Task<string> GetStudioNameAsync(int studioID) {
            return base.Channel.GetStudioNameAsync(studioID);
        }
        
        public string GetGamePlatforms(int gameID) {
            return base.Channel.GetGamePlatforms(gameID);
        }
        
        public System.Threading.Tasks.Task<string> GetGamePlatformsAsync(int gameID) {
            return base.Channel.GetGamePlatformsAsync(gameID);
        }
        
        public string GetPlatform(int platformID) {
            return base.Channel.GetPlatform(platformID);
        }
        
        public System.Threading.Tasks.Task<string> GetPlatformAsync(int platformID) {
            return base.Channel.GetPlatformAsync(platformID);
        }
        
        public string GetGameGenres(int gameID) {
            return base.Channel.GetGameGenres(gameID);
        }
        
        public System.Threading.Tasks.Task<string> GetGameGenresAsync(int gameID) {
            return base.Channel.GetGameGenresAsync(gameID);
        }
        
        public string GetGenre(int genreID) {
            return base.Channel.GetGenre(genreID);
        }
        
        public System.Threading.Tasks.Task<string> GetGenreAsync(int genreID) {
            return base.Channel.GetGenreAsync(genreID);
        }
        
        public WcfServiceLibrary.GameList[] GetGameListByAccountId(int accountID) {
            return base.Channel.GetGameListByAccountId(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.GameList[]> GetGameListByAccountIdAsync(int accountID) {
            return base.Channel.GetGameListByAccountIdAsync(accountID);
        }
        
        public WcfServiceLibrary.Follow[] GetFollowListByAccountId(int accountID) {
            return base.Channel.GetFollowListByAccountId(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Follow[]> GetFollowListByAccountIdAsync(int accountID) {
            return base.Channel.GetFollowListByAccountIdAsync(accountID);
        }
        
        public void DeleteFollowEntry(int accountID, int gameID) {
            base.Channel.DeleteFollowEntry(accountID, gameID);
        }
        
        public System.Threading.Tasks.Task DeleteFollowEntryAsync(int accountID, int gameID) {
            return base.Channel.DeleteFollowEntryAsync(accountID, gameID);
        }
        
        public void DeleteGameListEntry(int accountID, int gameID) {
            base.Channel.DeleteGameListEntry(accountID, gameID);
        }
        
        public System.Threading.Tasks.Task DeleteGameListEntryAsync(int accountID, int gameID) {
            return base.Channel.DeleteGameListEntryAsync(accountID, gameID);
        }
        
        public void InsertNewFollow(WcfServiceLibrary.Follow follow) {
            base.Channel.InsertNewFollow(follow);
        }
        
        public System.Threading.Tasks.Task InsertNewFollowAsync(WcfServiceLibrary.Follow follow) {
            return base.Channel.InsertNewFollowAsync(follow);
        }
        
        public void UpdateGameList(WcfServiceLibrary.GameList gameList) {
            base.Channel.UpdateGameList(gameList);
        }
        
        public System.Threading.Tasks.Task UpdateGameListAsync(WcfServiceLibrary.GameList gameList) {
            return base.Channel.UpdateGameListAsync(gameList);
        }
        
        public void InsertNewGameList(WcfServiceLibrary.GameList gameList) {
            base.Channel.InsertNewGameList(gameList);
        }
        
        public System.Threading.Tasks.Task InsertNewGameListAsync(WcfServiceLibrary.GameList gameList) {
            return base.Channel.InsertNewGameListAsync(gameList);
        }
        
        public WcfServiceLibrary.Friend[] GetFriendListByAccountId(int accountID) {
            return base.Channel.GetFriendListByAccountId(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendListByAccountIdAsync(int accountID) {
            return base.Channel.GetFriendListByAccountIdAsync(accountID);
        }
        
        public WcfServiceLibrary.Account GetAccountById(int accountID) {
            return base.Channel.GetAccountById(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Account> GetAccountByIdAsync(int accountID) {
            return base.Channel.GetAccountByIdAsync(accountID);
        }
        
        public void DeleteFriend(int accountID, int friendID) {
            base.Channel.DeleteFriend(accountID, friendID);
        }
        
        public System.Threading.Tasks.Task DeleteFriendAsync(int accountID, int friendID) {
            return base.Channel.DeleteFriendAsync(accountID, friendID);
        }
        
        public void InsertFriend(WcfServiceLibrary.Friend friend) {
            base.Channel.InsertFriend(friend);
        }
        
        public System.Threading.Tasks.Task InsertFriendAsync(WcfServiceLibrary.Friend friend) {
            return base.Channel.InsertFriendAsync(friend);
        }
        
        public void UpdateFriend(int accountID, int friendID, WcfServiceLibrary.Friend friend) {
            base.Channel.UpdateFriend(accountID, friendID, friend);
        }
        
        public System.Threading.Tasks.Task UpdateFriendAsync(int accountID, int friendID, WcfServiceLibrary.Friend friend) {
            return base.Channel.UpdateFriendAsync(accountID, friendID, friend);
        }
        
        public WcfServiceLibrary.GameList[] GetGameListByGameId(int gameID) {
            return base.Channel.GetGameListByGameId(gameID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.GameList[]> GetGameListByGameIdAsync(int gameID) {
            return base.Channel.GetGameListByGameIdAsync(gameID);
        }
        
        public WcfServiceLibrary.Friend[] GetFriendRequests(int accountID) {
            return base.Channel.GetFriendRequests(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendRequestsAsync(int accountID) {
            return base.Channel.GetFriendRequestsAsync(accountID);
        }
        
        public void UpdateFollow(int accountID, int gameID) {
            base.Channel.UpdateFollow(accountID, gameID);
        }
        
        public System.Threading.Tasks.Task UpdateFollowAsync(int accountID, int gameID) {
            return base.Channel.UpdateFollowAsync(accountID, gameID);
        }
        
        public WcfServiceLibrary.Friend[] GetFriendListBothAcceptedByAccountId(int accountID) {
            return base.Channel.GetFriendListBothAcceptedByAccountId(accountID);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Friend[]> GetFriendListBothAcceptedByAccountIdAsync(int accountID) {
            return base.Channel.GetFriendListBothAcceptedByAccountIdAsync(accountID);
        }
        
        public WcfServiceLibrary.Studio[] GetStudioList() {
            return base.Channel.GetStudioList();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Studio[]> GetStudioListAsync() {
            return base.Channel.GetStudioListAsync();
        }
        
        public void InsertNewStudio(WcfServiceLibrary.Studio studio) {
            base.Channel.InsertNewStudio(studio);
        }
        
        public System.Threading.Tasks.Task InsertNewStudioAsync(WcfServiceLibrary.Studio studio) {
            return base.Channel.InsertNewStudioAsync(studio);
        }
        
        public WcfServiceLibrary.Platform[] GetAllPlatforms() {
            return base.Channel.GetAllPlatforms();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Platform[]> GetAllPlatformsAsync() {
            return base.Channel.GetAllPlatformsAsync();
        }
        
        public WcfServiceLibrary.Genre[] GetAllGenres() {
            return base.Channel.GetAllGenres();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Genre[]> GetAllGenresAsync() {
            return base.Channel.GetAllGenresAsync();
        }
        
        public bool IsGameAlreadyExist(string title) {
            return base.Channel.IsGameAlreadyExist(title);
        }
        
        public System.Threading.Tasks.Task<bool> IsGameAlreadyExistAsync(string title) {
            return base.Channel.IsGameAlreadyExistAsync(title);
        }
        
        public WcfServiceLibrary.Studio GetStudioByName(string studio) {
            return base.Channel.GetStudioByName(studio);
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Studio> GetStudioByNameAsync(string studio) {
            return base.Channel.GetStudioByNameAsync(studio);
        }
        
        public void InsertNewGame(WcfServiceLibrary.Game game) {
            base.Channel.InsertNewGame(game);
        }
        
        public System.Threading.Tasks.Task InsertNewGameAsync(WcfServiceLibrary.Game game) {
            return base.Channel.InsertNewGameAsync(game);
        }
        
        public void InsertNewGamePlatform(WcfServiceLibrary.Game_platform game_Platform) {
            base.Channel.InsertNewGamePlatform(game_Platform);
        }
        
        public System.Threading.Tasks.Task InsertNewGamePlatformAsync(WcfServiceLibrary.Game_platform game_Platform) {
            return base.Channel.InsertNewGamePlatformAsync(game_Platform);
        }
        
        public void InsertNewGameGenre(WcfServiceLibrary.Game_genre game_Genre) {
            base.Channel.InsertNewGameGenre(game_Genre);
        }
        
        public System.Threading.Tasks.Task InsertNewGameGenreAsync(WcfServiceLibrary.Game_genre game_Genre) {
            return base.Channel.InsertNewGameGenreAsync(game_Genre);
        }
        
        public int GetGameId(string title) {
            return base.Channel.GetGameId(title);
        }
        
        public System.Threading.Tasks.Task<int> GetGameIdAsync(string title) {
            return base.Channel.GetGameIdAsync(title);
        }
        
        public int GetPlatformId(string platform) {
            return base.Channel.GetPlatformId(platform);
        }
        
        public System.Threading.Tasks.Task<int> GetPlatformIdAsync(string platform) {
            return base.Channel.GetPlatformIdAsync(platform);
        }
        
        public int GetGenreId(string genre) {
            return base.Channel.GetGenreId(genre);
        }
        
        public System.Threading.Tasks.Task<int> GetGenreIdAsync(string genre) {
            return base.Channel.GetGenreIdAsync(genre);
        }
        
        public WcfServiceLibrary.Game[] GetRequestedGames() {
            return base.Channel.GetRequestedGames();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Game[]> GetRequestedGamesAsync() {
            return base.Channel.GetRequestedGamesAsync();
        }
        
        public WcfServiceLibrary.Studio[] GetRequestedStudios() {
            return base.Channel.GetRequestedStudios();
        }
        
        public System.Threading.Tasks.Task<WcfServiceLibrary.Studio[]> GetRequestedStudiosAsync() {
            return base.Channel.GetRequestedStudiosAsync();
        }
        
        public string[] GetGamePlatformsList(int gameID) {
            return base.Channel.GetGamePlatformsList(gameID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGamePlatformsListAsync(int gameID) {
            return base.Channel.GetGamePlatformsListAsync(gameID);
        }
        
        public string[] GetGameGenresList(int gameID) {
            return base.Channel.GetGameGenresList(gameID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetGameGenresListAsync(int gameID) {
            return base.Channel.GetGameGenresListAsync(gameID);
        }
        
        public void DeleteAllGamePlatforms(int gameID) {
            base.Channel.DeleteAllGamePlatforms(gameID);
        }
        
        public System.Threading.Tasks.Task DeleteAllGamePlatformsAsync(int gameID) {
            return base.Channel.DeleteAllGamePlatformsAsync(gameID);
        }
        
        public void DeleteAllGameGenres(int gameID) {
            base.Channel.DeleteAllGameGenres(gameID);
        }
        
        public System.Threading.Tasks.Task DeleteAllGameGenresAsync(int gameID) {
            return base.Channel.DeleteAllGameGenresAsync(gameID);
        }
        
        public void DeleteGameEntry(int gameID) {
            base.Channel.DeleteGameEntry(gameID);
        }
        
        public System.Threading.Tasks.Task DeleteGameEntryAsync(int gameID) {
            return base.Channel.DeleteGameEntryAsync(gameID);
        }
        
        public void UpdateStudio(int studioID, WcfServiceLibrary.Studio studio) {
            base.Channel.UpdateStudio(studioID, studio);
        }
        
        public System.Threading.Tasks.Task UpdateStudioAsync(int studioID, WcfServiceLibrary.Studio studio) {
            return base.Channel.UpdateStudioAsync(studioID, studio);
        }
        
        public void DeleteStudio(int studioID) {
            base.Channel.DeleteStudio(studioID);
        }
        
        public System.Threading.Tasks.Task DeleteStudioAsync(int studioID) {
            return base.Channel.DeleteStudioAsync(studioID);
        }
        
        public void InsertNewPlatform(WcfServiceLibrary.Platform platform) {
            base.Channel.InsertNewPlatform(platform);
        }
        
        public System.Threading.Tasks.Task InsertNewPlatformAsync(WcfServiceLibrary.Platform platform) {
            return base.Channel.InsertNewPlatformAsync(platform);
        }
        
        public void InsertNewGenre(WcfServiceLibrary.Genre genre) {
            base.Channel.InsertNewGenre(genre);
        }
        
        public System.Threading.Tasks.Task InsertNewGenreAsync(WcfServiceLibrary.Genre genre) {
            return base.Channel.InsertNewGenreAsync(genre);
        }
    }
}
