#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertFollow(Follow instance);
    partial void UpdateFollow(Follow instance);
    partial void DeleteFollow(Follow instance);
    partial void InsertFriend(Friend instance);
    partial void UpdateFriend(Friend instance);
    partial void DeleteFriend(Friend instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertGame_genre(Game_genre instance);
    partial void UpdateGame_genre(Game_genre instance);
    partial void DeleteGame_genre(Game_genre instance);
    partial void InsertGame_platform(Game_platform instance);
    partial void UpdateGame_platform(Game_platform instance);
    partial void DeleteGame_platform(Game_platform instance);
    partial void InsertGameList(GameList instance);
    partial void UpdateGameList(GameList instance);
    partial void DeleteGameList(GameList instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertPlatform(Platform instance);
    partial void UpdatePlatform(Platform instance);
    partial void DeletePlatform(Platform instance);
    partial void InsertStudio(Studio instance);
    partial void UpdateStudio(Studio instance);
    partial void DeleteStudio(Studio instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::WcfServiceLibrary.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Follow> Follows
		{
			get
			{
				return this.GetTable<Follow>();
			}
		}
		
		public System.Data.Linq.Table<Friend> Friends
		{
			get
			{
				return this.GetTable<Friend>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Game_genre> Game_genres
		{
			get
			{
				return this.GetTable<Game_genre>();
			}
		}
		
		public System.Data.Linq.Table<Game_platform> Game_platforms
		{
			get
			{
				return this.GetTable<Game_platform>();
			}
		}
		
		public System.Data.Linq.Table<GameList> GameLists
		{
			get
			{
				return this.GetTable<GameList>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Platform> Platforms
		{
			get
			{
				return this.GetTable<Platform>();
			}
		}
		
		public System.Data.Linq.Table<Studio> Studios
		{
			get
			{
				return this.GetTable<Studio>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.account_avg_score", IsComposable=true)]
		public System.Nullable<decimal> account_avg_score([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NR", DbType="Int")] System.Nullable<int> nR)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nR).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.avg_score", IsComposable=true)]
		public System.Nullable<decimal> avg_score([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NR", DbType="Int")] System.Nullable<int> nR)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nR).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.number_of_game_entries", IsComposable=true)]
		public System.Nullable<int> number_of_game_entries([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NR", DbType="Int")] System.Nullable<int> nR)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nR).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.number_of_scores", IsComposable=true)]
		public System.Nullable<int> number_of_scores([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NR", DbType="Int")] System.Nullable<int> nR)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nR).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sum_of_newreviews", IsComposable=true)]
		public System.Nullable<int> sum_of_newreviews([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NR", DbType="Int")] System.Nullable<int> nR)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nR).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _Password;
		
		private string _Email;
		
		private string _Nickname;
		
		private string _Sex;
		
		private System.DateTime _Joined;
		
		private System.Data.Linq.Binary _Avatar;
		
		private bool _IsModerator;
		
		private bool _IsAdmin;
		
		private bool _IsActivated;
		
		private EntitySet<Follow> _Follows;
		
		private EntitySet<Friend> _Friends;
		
		private EntitySet<Friend> _Friends1;
		
		private EntitySet<GameList> _GameLists;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnJoinedChanging(System.DateTime value);
    partial void OnJoinedChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnIsModeratorChanging(bool value);
    partial void OnIsModeratorChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnIsActivatedChanging(bool value);
    partial void OnIsActivatedChanged();
    #endregion
		
		public Account()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="VarChar(6)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Joined", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.DateTime Joined
		{
			get
			{
				return this._Joined;
			}
			set
			{
				if ((this._Joined != value))
				{
					this.OnJoinedChanging(value);
					this.SendPropertyChanging();
					this._Joined = value;
					this.SendPropertyChanged("Joined");
					this.OnJoinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsModerator", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public bool IsModerator
		{
			get
			{
				return this._IsModerator;
			}
			set
			{
				if ((this._IsModerator != value))
				{
					this.OnIsModeratorChanging(value);
					this.SendPropertyChanging();
					this._IsModerator = value;
					this.SendPropertyChanged("IsModerator");
					this.OnIsModeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public bool IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Follow", Storage="_Follows", ThisKey="Id", OtherKey="Account_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<Follow> Follows
		{
			get
			{
				if ((this.serializing 
							&& (this._Follows.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Follows;
			}
			set
			{
				this._Follows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Friend", Storage="_Friends", ThisKey="Id", OtherKey="Account_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<Friend> Friends
		{
			get
			{
				if ((this.serializing 
							&& (this._Friends.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Friends;
			}
			set
			{
				this._Friends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Friend1", Storage="_Friends1", ThisKey="Id", OtherKey="Friend_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<Friend> Friends1
		{
			get
			{
				if ((this.serializing 
							&& (this._Friends1.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Friends1;
			}
			set
			{
				this._Friends1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GameList", Storage="_GameLists", ThisKey="Id", OtherKey="Account_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<GameList> GameLists
		{
			get
			{
				if ((this.serializing 
							&& (this._GameLists.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GameLists;
			}
			set
			{
				this._GameLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Friends(Friend entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = this;
		}
		
		private void detach_Friends1(Friend entity)
		{
			this.SendPropertyChanging();
			entity.Account1 = null;
		}
		
		private void attach_GameLists(GameList entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_GameLists(GameList entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void Initialize()
		{
			this._Follows = new EntitySet<Follow>(new Action<Follow>(this.attach_Follows), new Action<Follow>(this.detach_Follows));
			this._Friends = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends), new Action<Friend>(this.detach_Friends));
			this._Friends1 = new EntitySet<Friend>(new Action<Friend>(this.attach_Friends1), new Action<Friend>(this.detach_Friends1));
			this._GameLists = new EntitySet<GameList>(new Action<GameList>(this.attach_GameLists), new Action<GameList>(this.detach_GameLists));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Follow")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Follow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_Id;
		
		private int _Game_Id;
		
		private int _NewReview;
		
		private System.DateTime _DateOfFollowing;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    partial void OnNewReviewChanging(int value);
    partial void OnNewReviewChanged();
    partial void OnDateOfFollowingChanging(System.DateTime value);
    partial void OnDateOfFollowingChanged();
    #endregion
		
		public Follow()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewReview", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int NewReview
		{
			get
			{
				return this._NewReview;
			}
			set
			{
				if ((this._NewReview != value))
				{
					this.OnNewReviewChanging(value);
					this.SendPropertyChanging();
					this._NewReview = value;
					this.SendPropertyChanged("NewReview");
					this.OnNewReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfFollowing", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.DateTime DateOfFollowing
		{
			get
			{
				return this._DateOfFollowing;
			}
			set
			{
				if ((this._DateOfFollowing != value))
				{
					this.OnDateOfFollowingChanging(value);
					this.SendPropertyChanging();
					this._DateOfFollowing = value;
					this.SendPropertyChanged("DateOfFollowing");
					this.OnDateOfFollowingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Follow", Storage="_Account", ThisKey="Account_Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Follows.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Follows.Add(this);
						this._Account_Id = value.Id;
					}
					else
					{
						this._Account_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Follow", Storage="_Game", ThisKey="Game_Id", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Follows.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Follows.Add(this);
						this._Game_Id = value.Id;
					}
					else
					{
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friend")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Friend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_Id;
		
		private int _Friend_Id;
		
		private System.DateTime _DateOfAdding;
		
		private bool _IsAcceptedByBoth;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Account> _Account1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnFriend_IdChanging(int value);
    partial void OnFriend_IdChanged();
    partial void OnDateOfAddingChanging(System.DateTime value);
    partial void OnDateOfAddingChanged();
    partial void OnIsAcceptedByBothChanging(bool value);
    partial void OnIsAcceptedByBothChanged();
    #endregion
		
		public Friend()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Friend_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Friend_Id
		{
			get
			{
				return this._Friend_Id;
			}
			set
			{
				if ((this._Friend_Id != value))
				{
					if (this._Account1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFriend_IdChanging(value);
					this.SendPropertyChanging();
					this._Friend_Id = value;
					this.SendPropertyChanged("Friend_Id");
					this.OnFriend_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAdding", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.DateTime DateOfAdding
		{
			get
			{
				return this._DateOfAdding;
			}
			set
			{
				if ((this._DateOfAdding != value))
				{
					this.OnDateOfAddingChanging(value);
					this.SendPropertyChanging();
					this._DateOfAdding = value;
					this.SendPropertyChanged("DateOfAdding");
					this.OnDateOfAddingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAcceptedByBoth", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool IsAcceptedByBoth
		{
			get
			{
				return this._IsAcceptedByBoth;
			}
			set
			{
				if ((this._IsAcceptedByBoth != value))
				{
					this.OnIsAcceptedByBothChanging(value);
					this.SendPropertyChanging();
					this._IsAcceptedByBoth = value;
					this.SendPropertyChanged("IsAcceptedByBoth");
					this.OnIsAcceptedByBothChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Friend", Storage="_Account", ThisKey="Account_Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Friends.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Friends.Add(this);
						this._Account_Id = value.Id;
					}
					else
					{
						this._Account_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Friend1", Storage="_Account1", ThisKey="Friend_Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account1
		{
			get
			{
				return this._Account1.Entity;
			}
			set
			{
				Account previousValue = this._Account1.Entity;
				if (((previousValue != value) 
							|| (this._Account1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account1.Entity = null;
						previousValue.Friends1.Remove(this);
					}
					this._Account1.Entity = value;
					if ((value != null))
					{
						value.Friends1.Add(this);
						this._Friend_Id = value.Id;
					}
					else
					{
						this._Friend_Id = default(int);
					}
					this.SendPropertyChanged("Account1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Account = default(EntityRef<Account>);
			this._Account1 = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private int _Studio_Id;
		
		private string _Publisher;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Nullable<System.DateTime> _Premiere;
		
		private string _Description;
		
		private System.DateTime _DateOfAddiction;
		
		private bool _IsAccepted;
		
		private EntitySet<Follow> _Follows;
		
		private EntitySet<Game_genre> _Game_genres;
		
		private EntitySet<Game_platform> _Game_platforms;
		
		private EntitySet<GameList> _GameLists;
		
		private EntityRef<Studio> _Studio;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnStudio_IdChanging(int value);
    partial void OnStudio_IdChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnPremiereChanging(System.Nullable<System.DateTime> value);
    partial void OnPremiereChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateOfAddictionChanging(System.DateTime value);
    partial void OnDateOfAddictionChanged();
    partial void OnIsAcceptedChanging(bool value);
    partial void OnIsAcceptedChanged();
    #endregion
		
		public Game()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Studio_Id", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int Studio_Id
		{
			get
			{
				return this._Studio_Id;
			}
			set
			{
				if ((this._Studio_Id != value))
				{
					if (this._Studio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudio_IdChanging(value);
					this.SendPropertyChanging();
					this._Studio_Id = value;
					this.SendPropertyChanged("Studio_Id");
					this.OnStudio_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Premiere", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> Premiere
		{
			get
			{
				return this._Premiere;
			}
			set
			{
				if ((this._Premiere != value))
				{
					this.OnPremiereChanging(value);
					this.SendPropertyChanging();
					this._Premiere = value;
					this.SendPropertyChanged("Premiere");
					this.OnPremiereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAddiction", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.DateTime DateOfAddiction
		{
			get
			{
				return this._DateOfAddiction;
			}
			set
			{
				if ((this._DateOfAddiction != value))
				{
					this.OnDateOfAddictionChanging(value);
					this.SendPropertyChanging();
					this._DateOfAddiction = value;
					this.SendPropertyChanged("DateOfAddiction");
					this.OnDateOfAddictionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAccepted", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public bool IsAccepted
		{
			get
			{
				return this._IsAccepted;
			}
			set
			{
				if ((this._IsAccepted != value))
				{
					this.OnIsAcceptedChanging(value);
					this.SendPropertyChanging();
					this._IsAccepted = value;
					this.SendPropertyChanged("IsAccepted");
					this.OnIsAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Follow", Storage="_Follows", ThisKey="Id", OtherKey="Game_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<Follow> Follows
		{
			get
			{
				if ((this.serializing 
							&& (this._Follows.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Follows;
			}
			set
			{
				this._Follows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Game_genre", Storage="_Game_genres", ThisKey="Id", OtherKey="Game_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<Game_genre> Game_genres
		{
			get
			{
				if ((this.serializing 
							&& (this._Game_genres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Game_genres;
			}
			set
			{
				this._Game_genres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Game_platform", Storage="_Game_platforms", ThisKey="Id", OtherKey="Game_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<Game_platform> Game_platforms
		{
			get
			{
				if ((this.serializing 
							&& (this._Game_platforms.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Game_platforms;
			}
			set
			{
				this._Game_platforms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameList", Storage="_GameLists", ThisKey="Id", OtherKey="Game_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<GameList> GameLists
		{
			get
			{
				if ((this.serializing 
							&& (this._GameLists.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GameLists;
			}
			set
			{
				this._GameLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studio_Game", Storage="_Studio", ThisKey="Studio_Id", OtherKey="Id", IsForeignKey=true)]
		public Studio Studio
		{
			get
			{
				return this._Studio.Entity;
			}
			set
			{
				Studio previousValue = this._Studio.Entity;
				if (((previousValue != value) 
							|| (this._Studio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studio.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Studio.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._Studio_Id = value.Id;
					}
					else
					{
						this._Studio_Id = default(int);
					}
					this.SendPropertyChanged("Studio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Follows(Follow entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Game_genres(Game_genre entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Game_genres(Game_genre entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Game_platforms(Game_platform entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Game_platforms(Game_platform entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_GameLists(GameList entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameLists(GameList entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void Initialize()
		{
			this._Follows = new EntitySet<Follow>(new Action<Follow>(this.attach_Follows), new Action<Follow>(this.detach_Follows));
			this._Game_genres = new EntitySet<Game_genre>(new Action<Game_genre>(this.attach_Game_genres), new Action<Game_genre>(this.detach_Game_genres));
			this._Game_platforms = new EntitySet<Game_platform>(new Action<Game_platform>(this.attach_Game_platforms), new Action<Game_platform>(this.detach_Game_platforms));
			this._GameLists = new EntitySet<GameList>(new Action<GameList>(this.attach_GameLists), new Action<GameList>(this.detach_GameLists));
			this._Studio = default(EntityRef<Studio>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game_genre")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Game_genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Game_Id;
		
		private int _Genre_Id;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Genre> _Genre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    partial void OnGenre_IdChanging(int value);
    partial void OnGenre_IdChanged();
    #endregion
		
		public Game_genre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Genre_Id
		{
			get
			{
				return this._Genre_Id;
			}
			set
			{
				if ((this._Genre_Id != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenre_IdChanging(value);
					this.SendPropertyChanging();
					this._Genre_Id = value;
					this.SendPropertyChanged("Genre_Id");
					this.OnGenre_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Game_genre", Storage="_Game", ThisKey="Game_Id", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Game_genres.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Game_genres.Add(this);
						this._Game_Id = value.Id;
					}
					else
					{
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Game_genre", Storage="_Genre", ThisKey="Genre_Id", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.Game_genres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.Game_genres.Add(this);
						this._Genre_Id = value.Id;
					}
					else
					{
						this._Genre_Id = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Game = default(EntityRef<Game>);
			this._Genre = default(EntityRef<Genre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game_platform")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Game_platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Game_Id;
		
		private int _Platform_Id;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Platform> _Platform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    partial void OnPlatform_IdChanging(int value);
    partial void OnPlatform_IdChanged();
    #endregion
		
		public Game_platform()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Platform_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Platform_Id
		{
			get
			{
				return this._Platform_Id;
			}
			set
			{
				if ((this._Platform_Id != value))
				{
					if (this._Platform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlatform_IdChanging(value);
					this.SendPropertyChanging();
					this._Platform_Id = value;
					this.SendPropertyChanged("Platform_Id");
					this.OnPlatform_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Game_platform", Storage="_Game", ThisKey="Game_Id", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Game_platforms.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Game_platforms.Add(this);
						this._Game_Id = value.Id;
					}
					else
					{
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Game_platform", Storage="_Platform", ThisKey="Platform_Id", OtherKey="Id", IsForeignKey=true)]
		public Platform Platform
		{
			get
			{
				return this._Platform.Entity;
			}
			set
			{
				Platform previousValue = this._Platform.Entity;
				if (((previousValue != value) 
							|| (this._Platform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Platform.Entity = null;
						previousValue.Game_platforms.Remove(this);
					}
					this._Platform.Entity = value;
					if ((value != null))
					{
						value.Game_platforms.Add(this);
						this._Platform_Id = value.Id;
					}
					else
					{
						this._Platform_Id = default(int);
					}
					this.SendPropertyChanged("Platform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Game = default(EntityRef<Game>);
			this._Platform = default(EntityRef<Platform>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameList")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class GameList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_Id;
		
		private int _Game_Id;
		
		private string _Status;
		
		private System.Nullable<int> _Score;
		
		private string _Review;
		
		private System.Nullable<System.DateTime> _DateOfAddingReview;
		
		private System.DateTime _DateOfAddition;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IdChanging(int value);
    partial void OnAccount_IdChanged();
    partial void OnGame_IdChanging(int value);
    partial void OnGame_IdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnReviewChanging(string value);
    partial void OnReviewChanged();
    partial void OnDateOfAddingReviewChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfAddingReviewChanged();
    partial void OnDateOfAdditionChanging(System.DateTime value);
    partial void OnDateOfAdditionChanged();
    #endregion
		
		public GameList()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Account_Id
		{
			get
			{
				return this._Account_Id;
			}
			set
			{
				if ((this._Account_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_Id = value;
					this.SendPropertyChanged("Account_Id");
					this.OnAccount_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Game_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int Game_Id
		{
			get
			{
				return this._Game_Id;
			}
			set
			{
				if ((this._Game_Id != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGame_IdChanging(value);
					this.SendPropertyChanging();
					this._Game_Id = value;
					this.SendPropertyChanged("Game_Id");
					this.OnGame_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Review", DbType="VarChar(MAX)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Review
		{
			get
			{
				return this._Review;
			}
			set
			{
				if ((this._Review != value))
				{
					this.OnReviewChanging(value);
					this.SendPropertyChanging();
					this._Review = value;
					this.SendPropertyChanged("Review");
					this.OnReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAddingReview", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> DateOfAddingReview
		{
			get
			{
				return this._DateOfAddingReview;
			}
			set
			{
				if ((this._DateOfAddingReview != value))
				{
					this.OnDateOfAddingReviewChanging(value);
					this.SendPropertyChanging();
					this._DateOfAddingReview = value;
					this.SendPropertyChanged("DateOfAddingReview");
					this.OnDateOfAddingReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfAddition", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.DateTime DateOfAddition
		{
			get
			{
				return this._DateOfAddition;
			}
			set
			{
				if ((this._DateOfAddition != value))
				{
					this.OnDateOfAdditionChanging(value);
					this.SendPropertyChanging();
					this._DateOfAddition = value;
					this.SendPropertyChanged("DateOfAddition");
					this.OnDateOfAdditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameList", Storage="_Game", ThisKey="Game_Id", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameLists.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameLists.Add(this);
						this._Game_Id = value.Id;
					}
					else
					{
						this._Game_Id = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GameList", Storage="_Account", ThisKey="Account_Id", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.GameLists.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.GameLists.Add(this);
						this._Account_Id = value.Id;
					}
					else
					{
						this._Account_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Game = default(EntityRef<Game>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Genre1;
		
		private EntitySet<Game_genre> _Game_genres;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGenre1Changing(string value);
    partial void OnGenre1Changed();
    #endregion
		
		public Genre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Genre", Storage="_Genre1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Genre1
		{
			get
			{
				return this._Genre1;
			}
			set
			{
				if ((this._Genre1 != value))
				{
					this.OnGenre1Changing(value);
					this.SendPropertyChanging();
					this._Genre1 = value;
					this.SendPropertyChanged("Genre1");
					this.OnGenre1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Game_genre", Storage="_Game_genres", ThisKey="Id", OtherKey="Genre_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Game_genre> Game_genres
		{
			get
			{
				if ((this.serializing 
							&& (this._Game_genres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Game_genres;
			}
			set
			{
				this._Game_genres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Game_genres(Game_genre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_Game_genres(Game_genre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
		
		private void Initialize()
		{
			this._Game_genres = new EntitySet<Game_genre>(new Action<Game_genre>(this.attach_Game_genres), new Action<Game_genre>(this.detach_Game_genres));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Platform")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Platform : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Platform1;
		
		private EntitySet<Game_platform> _Game_platforms;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlatform1Changing(string value);
    partial void OnPlatform1Changed();
    #endregion
		
		public Platform()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Platform", Storage="_Platform1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Platform1
		{
			get
			{
				return this._Platform1;
			}
			set
			{
				if ((this._Platform1 != value))
				{
					this.OnPlatform1Changing(value);
					this.SendPropertyChanging();
					this._Platform1 = value;
					this.SendPropertyChanged("Platform1");
					this.OnPlatform1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Platform_Game_platform", Storage="_Game_platforms", ThisKey="Id", OtherKey="Platform_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Game_platform> Game_platforms
		{
			get
			{
				if ((this.serializing 
							&& (this._Game_platforms.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Game_platforms;
			}
			set
			{
				this._Game_platforms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Game_platforms(Game_platform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = this;
		}
		
		private void detach_Game_platforms(Game_platform entity)
		{
			this.SendPropertyChanging();
			entity.Platform = null;
		}
		
		private void Initialize()
		{
			this._Game_platforms = new EntitySet<Game_platform>(new Action<Game_platform>(this.attach_Game_platforms), new Action<Game_platform>(this.detach_Game_platforms));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studio")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Studio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Studio1;
		
		private bool _Indie;
		
		private bool _IsAccepted;
		
		private EntitySet<Game> _Games;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStudio1Changing(string value);
    partial void OnStudio1Changed();
    partial void OnIndieChanging(bool value);
    partial void OnIndieChanged();
    partial void OnIsAcceptedChanging(bool value);
    partial void OnIsAcceptedChanged();
    #endregion
		
		public Studio()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Studio", Storage="_Studio1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Studio1
		{
			get
			{
				return this._Studio1;
			}
			set
			{
				if ((this._Studio1 != value))
				{
					this.OnStudio1Changing(value);
					this.SendPropertyChanging();
					this._Studio1 = value;
					this.SendPropertyChanged("Studio1");
					this.OnStudio1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Indie", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool Indie
		{
			get
			{
				return this._Indie;
			}
			set
			{
				if ((this._Indie != value))
				{
					this.OnIndieChanging(value);
					this.SendPropertyChanging();
					this._Indie = value;
					this.SendPropertyChanged("Indie");
					this.OnIndieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAccepted", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public bool IsAccepted
		{
			get
			{
				return this._IsAccepted;
			}
			set
			{
				if ((this._IsAccepted != value))
				{
					this.OnIsAcceptedChanging(value);
					this.SendPropertyChanging();
					this._IsAccepted = value;
					this.SendPropertyChanged("IsAccepted");
					this.OnIsAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studio_Game", Storage="_Games", ThisKey="Id", OtherKey="Studio_Id")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Game> Games
		{
			get
			{
				if ((this.serializing 
							&& (this._Games.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Studio = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Studio = null;
		}
		
		private void Initialize()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
